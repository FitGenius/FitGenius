const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando deploy do FitGenius...\n');

// Verificar se √© um reposit√≥rio git
function checkGitRepo() {
  try {
    execSync('git status', { stdio: 'pipe' });
    return true;
  } catch (error) {
    return false;
  }
}

// Inicializar reposit√≥rio se necess√°rio
function initGitRepo() {
  console.log('üìÇ Inicializando reposit√≥rio Git...');
  try {
    execSync('git init', { stdio: 'inherit' });
    console.log('‚úÖ Reposit√≥rio Git inicializado');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Git:', error.message);
    throw error;
  }
}

// Verificar vari√°veis de ambiente essenciais
function checkEnvironmentVariables() {
  console.log('üîç Verificando vari√°veis de ambiente...');

  const envFile = path.join(__dirname, '..', '.env.production');
  if (!fs.existsSync(envFile)) {
    console.error('‚ùå Arquivo .env.production n√£o encontrado');
    throw new Error('Missing .env.production');
  }

  const envContent = fs.readFileSync(envFile, 'utf8');
  const requiredVars = [
    'DATABASE_URL',
    'NEXTAUTH_SECRET',
    'NEXT_PUBLIC_SUPABASE_URL',
    'STRIPE_SECRET_KEY',
    'STRIPE_WEBHOOK_SECRET'
  ];

  const missingVars = requiredVars.filter(varName =>
    !envContent.includes(varName) || envContent.includes(`${varName}=""`) || envContent.includes(`${varName}="your-`)
  );

  if (missingVars.length > 0) {
    console.error('‚ùå Vari√°veis de ambiente faltando ou n√£o configuradas:');
    missingVars.forEach(varName => console.error(`   - ${varName}`));
    throw new Error('Missing environment variables');
  }

  console.log('‚úÖ Todas as vari√°veis essenciais configuradas');
}

// Verificar depend√™ncias
function checkDependencies() {
  console.log('üì¶ Verificando depend√™ncias...');

  const packageJson = path.join(__dirname, '..', 'package.json');
  if (!fs.existsSync(packageJson)) {
    console.error('‚ùå package.json n√£o encontrado');
    throw new Error('Missing package.json');
  }

  try {
    execSync('npm ls --production > /dev/null 2>&1', { stdio: 'pipe' });
    console.log('‚úÖ Depend√™ncias verificadas');
  } catch (error) {
    console.log('üì• Instalando depend√™ncias...');
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ Depend√™ncias instaladas');
  }
}

// Executar build de produ√ß√£o
function buildProduction() {
  console.log('üèóÔ∏è Executando build de produ√ß√£o...');

  try {
    execSync('npm run build', { stdio: 'inherit' });
    console.log('‚úÖ Build conclu√≠do com sucesso');
  } catch (error) {
    console.error('‚ùå Erro no build:', error.message);
    throw error;
  }
}

// Preparar para deploy
function prepareForDeploy() {
  console.log('üîß Preparando arquivos para deploy...');

  // Verificar se vercel.json existe
  const vercelConfig = path.join(__dirname, '..', 'vercel.json');
  if (!fs.existsSync(vercelConfig)) {
    console.log('üìÑ Criando vercel.json...');
    const vercelSettings = {
      "version": 2,
      "regions": ["gru1"],
      "env": {
        "DATABASE_URL": "@database_url",
        "NEXTAUTH_SECRET": "@nextauth_secret",
        "STRIPE_SECRET_KEY": "@stripe_secret",
        "STRIPE_WEBHOOK_SECRET": "@stripe_webhook_secret"
      },
      "build": {
        "env": {
          "NEXT_TELEMETRY_DISABLED": "1"
        }
      },
      "functions": {
        "app/api/**/*.js": {
          "maxDuration": 30
        }
      }
    };

    fs.writeFileSync(vercelConfig, JSON.stringify(vercelSettings, null, 2));
    console.log('‚úÖ vercel.json criado');
  } else {
    console.log('‚úÖ vercel.json j√° existe');
  }

  console.log('‚úÖ Prepara√ß√£o conclu√≠da');
}

// Commit mudan√ßas
function commitChanges() {
  console.log('üìù Fazendo commit das mudan√ßas...');

  try {
    // Verificar se h√° mudan√ßas para commit
    const status = execSync('git status --porcelain', { encoding: 'utf8' });

    if (status.trim()) {
      execSync('git add .', { stdio: 'inherit' });
      execSync('git commit -m "feat: production deployment setup with Stripe integration\\n\\n‚ú® Added Stripe products and webhook configuration\\nüîß Updated environment variables for production\\nüöÄ Ready for production deployment"', { stdio: 'inherit' });
      console.log('‚úÖ Commit realizado');
    } else {
      console.log('‚úÖ Nenhuma mudan√ßa para commit');
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è Erro no commit (pode ser normal):', error.message);
  }
}

// Instru√ß√µes para deploy manual
function showDeployInstructions() {
  console.log('\nüéØ PR√ìXIMOS PASSOS PARA DEPLOY:\n');

  console.log('1Ô∏è‚É£ GITHUB (se ainda n√£o est√°):');
  console.log('   ‚Ä¢ Criar reposit√≥rio: https://github.com/new');
  console.log('   ‚Ä¢ git remote add origin https://github.com/seu-usuario/fitgenius.git');
  console.log('   ‚Ä¢ git branch -M main');
  console.log('   ‚Ä¢ git push -u origin main');

  console.log('\n2Ô∏è‚É£ VERCEL DEPLOY:');
  console.log('   ‚Ä¢ Acessar: https://vercel.com/new');
  console.log('   ‚Ä¢ Conectar reposit√≥rio GitHub');
  console.log('   ‚Ä¢ Adicionar vari√°veis de ambiente do .env.production');
  console.log('   ‚Ä¢ Deploy autom√°tico!');

  console.log('\n3Ô∏è‚É£ VARI√ÅVEIS DE AMBIENTE NA VERCEL:');
  const envContent = fs.readFileSync(path.join(__dirname, '..', '.env.production'), 'utf8');
  const envLines = envContent.split('\n').filter(line =>
    line.startsWith('DATABASE_URL') ||
    line.startsWith('NEXTAUTH_SECRET') ||
    line.startsWith('STRIPE_') ||
    line.startsWith('NEXT_PUBLIC_')
  );

  envLines.forEach(line => {
    if (line.includes('=')) {
      const [key, value] = line.split('=');
      console.log(`   ${key}=${value}`);
    }
  });

  console.log('\n4Ô∏è‚É£ P√ìS-DEPLOY:');
  console.log('   ‚Ä¢ Testar webhook Stripe no dashboard');
  console.log('   ‚Ä¢ Executar: node scripts/test-production.js');
  console.log('   ‚Ä¢ Configurar dom√≠nio customizado');

  console.log('\nüéâ FITGENIUS PRONTO PARA O SUCESSO!');
}

// Execu√ß√£o principal
async function main() {
  try {
    // Verifica√ß√µes pr√©-deploy
    checkEnvironmentVariables();
    checkDependencies();

    // Se n√£o √© um repo Git, inicializar
    if (!checkGitRepo()) {
      initGitRepo();
    }

    // Build de produ√ß√£o
    buildProduction();

    // Preparar para deploy
    prepareForDeploy();

    // Commit mudan√ßas
    commitChanges();

    // Mostrar instru√ß√µes
    showDeployInstructions();

    console.log('\n‚úÖ Prepara√ß√£o para deploy conclu√≠da com sucesso!');

  } catch (error) {
    console.error('\nüí• Erro durante a prepara√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { main };