// Temporary simplified schema for SQLite
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PROFESSIONAL
  CLIENT
  ADMIN
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Core User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  role          UserRole  @default(CLIENT)
  phoneNumber   String?
  birthDate     DateTime?
  gender        String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  professional Professional?
  client       Client?
  sessions     Session[]
  accounts     Account[]
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Professional Profile
model Professional {
  id               String           @id @default(cuid())
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialties      String?          // JSON string instead of array
  licenseNumber    String?          @unique
  bio              String?
  experience       Int?             // years of experience
  subscriptionTier SubscriptionTier @default(FREE)
  maxClients       Int              @default(3)
  timezone         String           @default("America/Sao_Paulo")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  clients Client[]
}

// Client Profile
model Client {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  professionalId String?
  professional   Professional? @relation(fields: [professionalId], references: [id])
  dateOfBirth    DateTime?
  height         Float?       // cm
  activityLevel  String?      // SEDENTARY, LIGHT, MODERATE, INTENSE
  status         ClientStatus @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}