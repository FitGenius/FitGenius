// Script para testar conex√£o com banco e criar usu√°rio admin
require('dotenv').config();
const { PrismaClient } = require('./src/generated/prisma');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testDatabaseConnection() {
    console.log('üîç Testando conex√£o com banco de dados...');
    console.log('Database URL:', process.env.DATABASE_URL?.replace(/:[^:]*@/, ':***@'));

    try {
        // Testar conex√£o
        await prisma.$connect();
        console.log('‚úÖ Conex√£o com banco estabelecida com sucesso!');

        // Verificar tabelas existentes
        console.log('\nüìã Verificando estrutura do banco...');

        // Tentar criar usu√°rio admin
        console.log('\nüë§ Criando usu√°rio administrador...');

        const hashedPassword = await bcrypt.hash('admin123', 12);

        const adminUser = await prisma.user.upsert({
            where: { email: 'admin@admin.com.br' },
            update: {
                password: hashedPassword,
                name: 'Administrador',
                role: 'ADMIN',
                isActive: true
            },
            create: {
                email: 'admin@admin.com.br',
                password: hashedPassword,
                name: 'Administrador',
                role: 'ADMIN',
                isActive: true,
                emailVerified: new Date()
            }
        });

        console.log('‚úÖ Usu√°rio admin criado/atualizado com sucesso!');
        console.log('üìß Email:', adminUser.email);
        console.log('üë§ Nome:', adminUser.name);
        console.log('üîë Role:', adminUser.role);
        console.log('üÜî ID:', adminUser.id);

        // Testar algumas queries b√°sicas
        console.log('\nüß™ Testando queries b√°sicas...');

        const userCount = await prisma.user.count();
        console.log(`üìä Total de usu√°rios: ${userCount}`);

        // Verificar se as tabelas principais existem
        try {
            const exerciseCount = await prisma.exercise.count();
            console.log(`üèãÔ∏è Total de exerc√≠cios: ${exerciseCount}`);
        } catch (e) {
            console.log('‚ö†Ô∏è Tabela Exercise pode n√£o existir ainda');
        }

        try {
            const professionalCount = await prisma.professional.count();
            console.log(`üë®‚Äç‚öïÔ∏è Total de profissionais: ${professionalCount}`);
        } catch (e) {
            console.log('‚ö†Ô∏è Tabela Professional pode n√£o existir ainda');
        }

    } catch (error) {
        console.error('‚ùå Erro na conex√£o com banco:', error.message);

        if (error.code === 'P1001') {
            console.log('üîß Verifique se o PostgreSQL est√° rodando no EasyPanel');
            console.log('üîß URL de conex√£o:', process.env.DATABASE_URL?.replace(/:[^:]*@/, ':***@'));
        } else if (error.code === 'P1000') {
            console.log('üîß Problema de autentica√ß√£o com o banco');
            console.log('üîß Verifique usu√°rio e senha do PostgreSQL');
        } else {
            console.log('üîß Erro espec√≠fico:', error.code);
        }
    } finally {
        await prisma.$disconnect();
        console.log('\nüîå Conex√£o fechada');
    }
}

// Executar teste
testDatabaseConnection()
    .then(() => {
        console.log('\n‚úÖ Teste de conex√£o conclu√≠do!');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Falha no teste:', error);
        process.exit(1);
    });