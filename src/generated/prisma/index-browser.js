
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  name: 'name',
  image: 'image',
  role: 'role',
  phoneNumber: 'phoneNumber',
  birthDate: 'birthDate',
  gender: 'gender',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.ProfessionalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  specialties: 'specialties',
  licenseNumber: 'licenseNumber',
  bio: 'bio',
  experience: 'experience',
  subscriptionTier: 'subscriptionTier',
  maxClients: 'maxClients',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  professionalId: 'professionalId',
  dateOfBirth: 'dateOfBirth',
  height: 'height',
  activityLevel: 'activityLevel',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientInviteScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  clientId: 'clientId',
  inviteCode: 'inviteCode',
  email: 'email',
  message: 'message',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  instructions: 'instructions',
  category: 'category',
  difficulty: 'difficulty',
  muscleGroups: 'muscleGroups',
  equipment: 'equipment',
  videoUrl: 'videoUrl',
  imageUrl: 'imageUrl',
  isPublic: 'isPublic',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  clientId: 'clientId',
  professionalId: 'professionalId',
  status: 'status',
  scheduledDate: 'scheduledDate',
  completedAt: 'completedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutExerciseScalarFieldEnum = {
  id: 'id',
  workoutId: 'workoutId',
  exerciseId: 'exerciseId',
  order: 'order',
  sets: 'sets',
  reps: 'reps',
  weight: 'weight',
  rest: 'rest',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.PhysicalAssessmentScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  professionalId: 'professionalId',
  assessmentDate: 'assessmentDate',
  weight: 'weight',
  height: 'height',
  bodyFat: 'bodyFat',
  muscleMass: 'muscleMass',
  bmi: 'bmi',
  waist: 'waist',
  chest: 'chest',
  arm: 'arm',
  thigh: 'thigh',
  hip: 'hip',
  restingHR: 'restingHR',
  bloodPressure: 'bloodPressure',
  notes: 'notes',
  photos: 'photos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  messageType: 'messageType',
  attachmentUrl: 'attachmentUrl',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  plan: 'plan',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  trialStart: 'trialStart',
  trialEnd: 'trialEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  stripeInvoiceId: 'stripeInvoiceId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  invoiceId: 'invoiceId',
  stripePaymentId: 'stripePaymentId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  failureReason: 'failureReason',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  stripePriceId: 'stripePriceId',
  maxClients: 'maxClients',
  features: 'features',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  period: 'period',
  clientsCount: 'clientsCount',
  workoutsCount: 'workoutsCount',
  assessmentsCount: 'assessmentsCount',
  messagesCount: 'messagesCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  description: 'description',
  category: 'category',
  type: 'type',
  icon: 'icon',
  points: 'points',
  requirement: 'requirement',
  tier: 'tier',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt',
  progress: 'progress',
  seen: 'seen'
};

exports.Prisma.StreakScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  currentDays: 'currentDays',
  longestDays: 'longestDays',
  lastActivity: 'lastActivity',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalPoints: 'totalPoints',
  level: 'level',
  totalWorkouts: 'totalWorkouts',
  totalMinutes: 'totalMinutes',
  totalCalories: 'totalCalories',
  perfectWeeks: 'perfectWeeks',
  totalAchievements: 'totalAchievements',
  rank: 'rank',
  weeklyGoal: 'weeklyGoal',
  monthlyGoal: 'monthlyGoal',
  lastWorkout: 'lastWorkout',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChallengeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  startDate: 'startDate',
  endDate: 'endDate',
  target: 'target',
  reward: 'reward',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChallengeParticipantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  challengeId: 'challengeId',
  progress: 'progress',
  completed: 'completed',
  completedAt: 'completedAt',
  joinedAt: 'joinedAt'
};

exports.Prisma.LeaderboardEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  period: 'period',
  periodDate: 'periodDate',
  points: 'points',
  workouts: 'workouts',
  minutes: 'minutes',
  rank: 'rank',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  brand: 'brand',
  category: 'category',
  servingSize: 'servingSize',
  servingUnit: 'servingUnit',
  calories: 'calories',
  carbs: 'carbs',
  protein: 'protein',
  fat: 'fat',
  fiber: 'fiber',
  sugar: 'sugar',
  sodium: 'sodium',
  vitamins: 'vitamins',
  minerals: 'minerals',
  isVerified: 'isVerified',
  isPublic: 'isPublic',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NutritionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  clientId: 'clientId',
  professionalId: 'professionalId',
  dailyCalories: 'dailyCalories',
  dailyCarbs: 'dailyCarbs',
  dailyProtein: 'dailyProtein',
  dailyFat: 'dailyFat',
  dailyFiber: 'dailyFiber',
  dailySodium: 'dailySodium',
  mealsPerDay: 'mealsPerDay',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealScalarFieldEnum = {
  id: 'id',
  name: 'name',
  planId: 'planId',
  order: 'order',
  targetTime: 'targetTime',
  targetCalories: 'targetCalories',
  targetCarbs: 'targetCarbs',
  targetProtein: 'targetProtein',
  targetFat: 'targetFat',
  instructions: 'instructions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealFoodScalarFieldEnum = {
  id: 'id',
  mealId: 'mealId',
  foodId: 'foodId',
  quantity: 'quantity',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.FoodDiaryScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  planId: 'planId',
  mealId: 'mealId',
  date: 'date',
  mealType: 'mealType',
  foodName: 'foodName',
  quantity: 'quantity',
  calories: 'calories',
  carbs: 'carbs',
  protein: 'protein',
  fat: 'fat',
  fiber: 'fiber',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  servings: 'servings',
  prepTime: 'prepTime',
  cookTime: 'cookTime',
  difficulty: 'difficulty',
  caloriesPerServing: 'caloriesPerServing',
  carbsPerServing: 'carbsPerServing',
  proteinPerServing: 'proteinPerServing',
  fatPerServing: 'fatPerServing',
  instructions: 'instructions',
  tips: 'tips',
  imageUrl: 'imageUrl',
  isPublic: 'isPublic',
  isVerified: 'isVerified',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeIngredientScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  foodId: 'foodId',
  quantity: 'quantity',
  unit: 'unit',
  notes: 'notes',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.RecipeTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.WaterIntakeScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  date: 'date',
  amount: 'amount',
  time: 'time',
  createdAt: 'createdAt'
};

exports.Prisma.NutritionGoalScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  goalType: 'goalType',
  targetWeight: 'targetWeight',
  activityLevel: 'activityLevel',
  bmr: 'bmr',
  tdee: 'tdee',
  carbRatio: 'carbRatio',
  proteinRatio: 'proteinRatio',
  fatRatio: 'fatRatio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  PROFESSIONAL: 'PROFESSIONAL',
  CLIENT: 'CLIENT',
  ADMIN: 'ADMIN'
};

exports.SubscriptionTier = exports.$Enums.SubscriptionTier = {
  FREE: 'FREE',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE'
};

exports.ClientStatus = exports.$Enums.ClientStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.InviteStatus = exports.$Enums.InviteStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  EXPIRED: 'EXPIRED'
};

exports.ExerciseCategory = exports.$Enums.ExerciseCategory = {
  CHEST: 'CHEST',
  BACK: 'BACK',
  SHOULDERS: 'SHOULDERS',
  ARMS: 'ARMS',
  LEGS: 'LEGS',
  ABS: 'ABS',
  CARDIO: 'CARDIO',
  FUNCTIONAL: 'FUNCTIONAL'
};

exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.WorkoutStatus = exports.$Enums.WorkoutStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  FILE: 'FILE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  WORKOUT_REMINDER: 'WORKOUT_REMINDER',
  NEW_WORKOUT: 'NEW_WORKOUT',
  ASSESSMENT_DUE: 'ASSESSMENT_DUE',
  MESSAGE_RECEIVED: 'MESSAGE_RECEIVED',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  SUBSCRIPTION_EXPIRING: 'SUBSCRIPTION_EXPIRING',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  PAYMENT_SUCCESS: 'PAYMENT_SUCCESS'
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  PAST_DUE: 'PAST_DUE',
  UNPAID: 'UNPAID',
  TRIALING: 'TRIALING',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  OPEN: 'OPEN',
  PAID: 'PAID',
  UNCOLLECTIBLE: 'UNCOLLECTIBLE',
  VOID: 'VOID'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED',
  REFUNDED: 'REFUNDED'
};

exports.PlanInterval = exports.$Enums.PlanInterval = {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  WORKOUT: 'WORKOUT',
  NUTRITION: 'NUTRITION',
  CONSISTENCY: 'CONSISTENCY',
  MILESTONE: 'MILESTONE',
  SOCIAL: 'SOCIAL',
  SPECIAL: 'SPECIAL'
};

exports.AchievementType = exports.$Enums.AchievementType = {
  COUNTER: 'COUNTER',
  STREAK: 'STREAK',
  MILESTONE: 'MILESTONE',
  CHALLENGE: 'CHALLENGE'
};

exports.AchievementTier = exports.$Enums.AchievementTier = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM',
  DIAMOND: 'DIAMOND'
};

exports.StreakType = exports.$Enums.StreakType = {
  WORKOUT: 'WORKOUT',
  NUTRITION: 'NUTRITION',
  CHECK_IN: 'CHECK_IN',
  MEDITATION: 'MEDITATION'
};

exports.ChallengeType = exports.$Enums.ChallengeType = {
  INDIVIDUAL: 'INDIVIDUAL',
  TEAM: 'TEAM',
  GLOBAL: 'GLOBAL'
};

exports.LeaderboardPeriod = exports.$Enums.LeaderboardPeriod = {
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  ALL_TIME: 'ALL_TIME'
};

exports.FoodCategory = exports.$Enums.FoodCategory = {
  GRAINS_CEREALS: 'GRAINS_CEREALS',
  VEGETABLES: 'VEGETABLES',
  FRUITS: 'FRUITS',
  DAIRY: 'DAIRY',
  MEAT_FISH: 'MEAT_FISH',
  LEGUMES_NUTS: 'LEGUMES_NUTS',
  OILS_FATS: 'OILS_FATS',
  BEVERAGES: 'BEVERAGES',
  SWEETS_SNACKS: 'SWEETS_SNACKS',
  CONDIMENTS: 'CONDIMENTS',
  SUPPLEMENTS: 'SUPPLEMENTS',
  OTHER: 'OTHER'
};

exports.MealType = exports.$Enums.MealType = {
  BREAKFAST: 'BREAKFAST',
  MORNING_SNACK: 'MORNING_SNACK',
  LUNCH: 'LUNCH',
  AFTERNOON_SNACK: 'AFTERNOON_SNACK',
  DINNER: 'DINNER',
  EVENING_SNACK: 'EVENING_SNACK',
  OTHER: 'OTHER'
};

exports.RecipeDifficulty = exports.$Enums.RecipeDifficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.NutritionGoalType = exports.$Enums.NutritionGoalType = {
  WEIGHT_LOSS: 'WEIGHT_LOSS',
  WEIGHT_GAIN: 'WEIGHT_GAIN',
  MAINTENANCE: 'MAINTENANCE',
  MUSCLE_GAIN: 'MUSCLE_GAIN',
  FAT_LOSS: 'FAT_LOSS'
};

exports.ActivityLevel = exports.$Enums.ActivityLevel = {
  SEDENTARY: 'SEDENTARY',
  LIGHT: 'LIGHT',
  MODERATE: 'MODERATE',
  ACTIVE: 'ACTIVE',
  VERY_ACTIVE: 'VERY_ACTIVE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Professional: 'Professional',
  Client: 'Client',
  ClientInvite: 'ClientInvite',
  Exercise: 'Exercise',
  Workout: 'Workout',
  WorkoutExercise: 'WorkoutExercise',
  PhysicalAssessment: 'PhysicalAssessment',
  Message: 'Message',
  Notification: 'Notification',
  Subscription: 'Subscription',
  Invoice: 'Invoice',
  Payment: 'Payment',
  Plan: 'Plan',
  Usage: 'Usage',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Streak: 'Streak',
  UserStats: 'UserStats',
  Challenge: 'Challenge',
  ChallengeParticipant: 'ChallengeParticipant',
  LeaderboardEntry: 'LeaderboardEntry',
  Food: 'Food',
  NutritionPlan: 'NutritionPlan',
  Meal: 'Meal',
  MealFood: 'MealFood',
  FoodDiary: 'FoodDiary',
  Recipe: 'Recipe',
  RecipeIngredient: 'RecipeIngredient',
  RecipeTag: 'RecipeTag',
  WaterIntake: 'WaterIntake',
  NutritionGoal: 'NutritionGoal'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
